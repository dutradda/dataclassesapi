export PYTHONPATH=.
export PROJECT_NAME='apidaora'
export VIRTUALENV=$(pwd)/venv


## Create virtualenv
create-virtualenv:
	virtualenv venv --python python3.7 --prompt '${PROJECT_NAME}-> '

## Show source virtualenv command
show-source-virtualenv:
	echo "Run this command activate virtualenv:"
	echo "$ source venv/bin/activate"
	echo "To deactivate run:"
	echo "$ deactivate"

## Install dependencies
dependencies: _check-virtualenv 
	which flit >/dev/null || pip install flit
	flit install --deps develop --extras all --symlink

## Build docs
build-docs: _check-virtualenv 
	mkdocs build
	cp ./docs/changelog.md ./CHANGELOG.md
	cd ./docs && ../scripts/replace-placeholders.py index.md ../README.md

## Serve docs local
serve-docs: _check-virtualenv 
	mkdocs serve

## Run ipython
shell: _check-virtualenv 
	ipython

check-code: isort black flake8 mypy

## Run isort saving changes
isort: _check-virtualenv 
	isort --recursive --apply ${PROJECT_NAME} docs/src

## Run black saving changes
black: _check-virtualenv 
	black ${PROJECT_NAME} docs/src

## Run flake8
flake8: _check-virtualenv 
	flake8 ${PROJECT_NAME} docs/src

## Run mypy
mypy: _check-virtualenv 
	mypy --show-traceback --strict ${PROJECT_NAME} # docs/src/index

## Run docs examples tests
tests-docs-examples: _check-virtualenv
	docs/src/index/test.sh

## Run tests
tests-code: _check-virtualenv
	pytest -xvv --cov ${PROJECT_NAME} --no-cov-on-fail \
		--cov-report=term-missing ${PROJECT_NAME}

## Run all tests
tests: tests-code tests-docs-examples

## Run check-code and tests
integration: _check-virtualenv
	bake check-code
	bake tests

## Deploy docs
deploy-docs: build-docs
	mkdocs gh-deploy

## Publish the package on pypi
deploy-pypi: _check-virtualenv 
	flit publish

## Run integration, deploy docs and deploy pypi
deploy: integration deploy-docs deploy-pypi

_check-virtualenv:
	echo ${PATH} | grep "$(pwd)/venv/bin" >/dev/null || \
		( echo "Please run 'source venv/bin/activate' to activate virtualenv!" && exit 1 )

create-changelog:
	echo ${m} > changelog.d/$(uuidgen | cut -c 1-8).change

changelog-draft:
	towncrier --draft

_update-version:
	git checkout master && git pull
	bumpversion ${v} --dry-run --no-commit --list | \
		grep new_version= | sed -e 's/new_version=//' | \
		xargs -n 1 towncrier --yes --version
	bake build-docs
	git commit -am 'Update CHANGELOG'
	bumpversion ${v}
	echo "Changelog and version updated successfully"

update-version-major:
	bake _update-version v=major

update-version-minor:
	bake _update-version v=minor

update-version-patch:
	bake _update-version v=patch

push-version:
	git push && git push --tags

build:
	flit build
